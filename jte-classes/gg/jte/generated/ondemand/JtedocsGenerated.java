package gg.jte.generated.ondemand;
import io.github.dumijdev.restdb4j.server.application.core.domain.common.Where.Operator;
import io.github.dumijdev.restdb4j.server.application.core.domain.select.JoinType;
import io.github.dumijdev.restdb4j.server.adapters.output.database.utils.SQLGenerator.Database;
@SuppressWarnings("unchecked")
public final class JtedocsGenerated {
	public static final String JTE_NAME = "docs.jte";
	public static final int[] JTE_LINE_INFO = {0,0,1,2,5,5,5,5,21,21,27,121,121,121,122,122,122,122,122,122,123,123,123,128,128,129,129,129,129,129,129,130,130,135,135,136,136,136,136,136,136,137,137,237,237,237,5,6,7,7,7,7};
	public static void render(gg.jte.html.HtmlTemplateOutput jteOutput, gg.jte.html.HtmlInterceptor jteHtmlInterceptor, Operator[] operators, JoinType[] joinTypes, Database[] databases) {
		jteOutput.writeContent("<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\"/>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n    <meta name=\"description\"\r\n          content=\"Comprehensive documentation for RestDB4J: Simplify operations with relational databases via a RESTful API.\"/>\r\n    <meta name=\"keywords\" content=\"RestDB4J, documentation, REST API, relational database, integration\"/>\r\n    <meta name=\"author\" content=\"DumiJDev\"/>\r\n    <title>RestDB4J | Official Documentation</title>\r\n    <link rel=\"stylesheet\" href=\"styles.css\"/>\r\n</head>\r\n<body>\r\n");
		jteOutput.writeContent("\r\n<header class=\"navbar\">\r\n    <div class=\"navbar-logo\">RestDB4J</div>\r\n    <button id=\"darkModeToggle\" class=\"dark-mode-toggle\">ðŸŒ™</button>\r\n</header>\r\n\r\n");
		jteOutput.writeContent("\r\n<div class=\"layout\">\r\n    <aside class=\"sidebar\">\r\n        <h3>Sections</h3>\r\n        <ul>\r\n            <li><a href=\"#introduction\">Introduction</a></li>\r\n            <li><a href=\"#motivation\">Motivation</a></li>\r\n            <li><a href=\"#installation\">Installation</a></li>\r\n            <li><a href=\"#operations\">Operations</a></li>\r\n            <li><a href=\"#constants\">Constants</a></li>\r\n            <li><a href=\"#configuration\">Configuration</a></li>\r\n            <li><a href=\"#contribute\">Contribute</a></li>\r\n        </ul>\r\n    </aside>\r\n\r\n    <main class=\"docs-content\">\r\n        <section id=\"introduction\">\r\n            <h2>Introduction</h2>\r\n            <p>\r\n                RestDB4J is an innovative solution that simplifies access to relational databases through\r\n                a RESTful interface. It allows you to perform operations such as querying, inserting,\r\n                updating, and deleting using HTTP calls. This approach promotes simple, secure, and standardized\r\n                integration between systems.\r\n            </p>\r\n            <h4>Key Benefits</h4>\r\n            <ul>\r\n                <li><b>Interoperability:</b> Supports multiple databases, including MySQL, PostgreSQL, and SQL Server.\r\n                </li>\r\n                <li><b>Ease of Use:</b> Perform operations via REST endpoints accessible from any language or framework\r\n                    that supports HTTP.\r\n                </li>\r\n                <li><b>Standardization:</b> Unified interface abstracts differences across databases.</li>\r\n                <li><b>Security:</b> Configurable access control ensures data protection.</li>\r\n                <li><b>Scalability:</b> Ideal for microservices architectures and distributed APIs.</li>\r\n            </ul>\r\n        </section>\r\n\r\n        <section id=\"motivation\">\r\n            <h2>Motivation</h2>\r\n            <p>\r\n                In an increasingly connected world, integrating systems is essential. However, directly managing\r\n                relational databases can be challenging due to differences in drivers, the need for SQL knowledge,\r\n                and security concerns. RestDB4J addresses these issues with a simple and efficient REST API.\r\n            </p>\r\n            <h4>Why a RESTful API for Databases?</h4>\r\n            <ul>\r\n                <li><b>Decentralization:</b> Enables access by multiple services without driver dependencies.</li>\r\n                <li><b>Simplified Access:</b> Eliminates the need to directly interact with SQL.</li>\r\n                <li><b>Consistency:</b> Follows REST standards for uniform communication.</li>\r\n                <li><b>Security:</b> Reduces risks with controlled endpoints.</li>\r\n                <li><b>Technological Interoperability:</b> Any HTTP-capable language can integrate easily.</li>\r\n            </ul>\r\n        </section>\r\n\r\n        <section id=\"installation\">\r\n            <h2>Installation</h2>\r\n            <p>Follow the steps below to install RestDB4J:</p>\r\n            <h3>Requirements</h3>\r\n            <ul>\r\n                <li>Java 21+</li>\r\n                <li>Maven 3.9.9+</li>\r\n                <li>Docker (for containerized use)</li>\r\n            </ul>\r\n\r\n            <h4>Running on the JVM</h4>\r\n            <ol>\r\n                <li><code>git clone <a href=\"https://github.com/DumiJDev/restdb4j.git\" target=\"_blank\">https://github.com/DumiJDev/restdb4j.git</a></code>\r\n                </li>\r\n                <li><code>cd restdb4j</code></li>\r\n                <li><code>mvn clean install package</code></li>\r\n                <li><code>cd target</code></li>\r\n                <li><code>java -jar restdb4j.jar</code></li>\r\n            </ol>\r\n\r\n            <h4>Running with Docker</h4>\r\n            <ol>\r\n                <li><code>docker run --name restdb4j --rm -p 8082:8080 dumijdev/restdb4j:latest</code></li>\r\n            </ol>\r\n        </section>\r\n\r\n        <section id=\"operations\">\r\n            <h2>Supported Operations</h2>\r\n            <ul>\r\n                <li>Querying (fields, tables, filters, sorting, joins, and pagination)</li>\r\n                <li>Insertion</li>\r\n                <li>Deletion</li>\r\n                <li>Updating</li>\r\n            </ul>\r\n        </section>\r\n\r\n        <section id=\"constants\">\r\n            <h2>Constants</h2>\r\n            <h4>Operators</h4>\r\n            <ul>\r\n                ");
		for (var operator : operators) {
			if (!operator.value().isEmpty()) {
				jteOutput.writeContent("\r\n                    <li>SQL: ");
				jteOutput.setContext("li", null);
				jteOutput.writeUserContent(operator.value());
				jteOutput.writeContent(", API: <code>");
				jteOutput.setContext("code", null);
				jteOutput.writeUserContent(operator.symbol());
				jteOutput.writeContent("</code></li>\r\n                ");
			}
		}
		jteOutput.writeContent("\r\n            </ul>\r\n\r\n            <h4>Join Types</h4>\r\n            <ul>\r\n                ");
		for (var joinType : joinTypes) {
			jteOutput.writeContent("\r\n                    <li>SQL: ");
			jteOutput.setContext("li", null);
			jteOutput.writeUserContent(joinType.name());
			jteOutput.writeContent(", API: <code>");
			jteOutput.setContext("code", null);
			jteOutput.writeUserContent(joinType.value());
			jteOutput.writeContent("</code></li>\r\n                ");
		}
		jteOutput.writeContent("\r\n            </ul>\r\n\r\n            <h4>Supported Databases</h4>\r\n            <ul>\r\n                ");
		for (var database : databases) {
			jteOutput.writeContent("\r\n                    <li>");
			jteOutput.setContext("li", null);
			jteOutput.writeUserContent(database.name());
			jteOutput.writeContent(", API: <code>");
			jteOutput.setContext("code", null);
			jteOutput.writeUserContent(database.value());
			jteOutput.writeContent("</code></li>\r\n                ");
		}
		jteOutput.writeContent("\r\n            </ul>\r\n        </section>\r\n\r\n        <section id=\"configuration\">\r\n            <h2>Configuration</h2>\r\n            <p>\r\n                Configurations can be defined in the <code>application.yml</code> file or via environment variables\r\n                (also compatible with Docker setups).\r\n            </p>\r\n\r\n            <h4>Docker Environment</h4>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Default</th>\r\n                    <th>Description</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>RESTDB_NAME</td>\r\n                    <td>RestDB4J</td>\r\n                    <td>Name for application instance</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_DB_PLATFORM</td>\r\n                    <td>h2</td>\r\n                    <td>Database platform (API value, see <a href=\"#constants\">Constants</a>)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_DB_PORT</td>\r\n                    <td></td>\r\n                    <td>Database port</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_DB_USER</td>\r\n                    <td>sa</td>\r\n                    <td>Database user</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_DB_PWD</td>\r\n                    <td>password</td>\r\n                    <td>Database password</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_DB_NAME</td>\r\n                    <td>restdb.db</td>\r\n                    <td>Database name</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_DRIVER_CLASS</td>\r\n                    <td></td>\r\n                    <td>Java Driver Class for Database</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_DB_URL</td>\r\n                    <td></td>\r\n                    <td>Database custom url String connection</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_SERVER_NAME</td>\r\n                    <td>restdb</td>\r\n                    <td>Name for instance in url</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>RESTDB_DB_HOST</td>\r\n                    <td>localhost</td>\r\n                    <td>Database host</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n\r\n        <section id=\"contribute\">\r\n            <h2>Contribute</h2>\r\n            <p>\r\n                Help improve RestDB4J by adding features, fixing bugs, or refining the codebase. Follow these steps:\r\n            </p>\r\n            <ol>\r\n                <li>Fork the repository and create a branch for your contribution.</li>\r\n                <li>Open an issue describing your goal or problem.</li>\r\n                <li>Implement changes following project standards.</li>\r\n                <li>Submit a Pull Request for review.</li>\r\n            </ol>\r\n        </section>\r\n    </main>\r\n</div>\r\n\r\n<footer>\r\n    <p>\r\n        &copy; 2024 RestDB4J | Created by\r\n        <a href=\"https://github.com/DumiJDev\" target=\"_blank\">DumiJDev</a>\r\n    </p>\r\n</footer>\r\n\r\n<script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n");
	}
	public static void renderMap(gg.jte.html.HtmlTemplateOutput jteOutput, gg.jte.html.HtmlInterceptor jteHtmlInterceptor, java.util.Map<String, Object> params) {
		Operator[] operators = (Operator[])params.get("operators");
		JoinType[] joinTypes = (JoinType[])params.get("joinTypes");
		Database[] databases = (Database[])params.get("databases");
		render(jteOutput, jteHtmlInterceptor, operators, joinTypes, databases);
	}
}
